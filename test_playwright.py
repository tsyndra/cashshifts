#!/usr/bin/env python3
"""
–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è Cash Shifts —Å –ø–æ–º–æ—â—å—é Playwright
"""
import asyncio
import subprocess
import time
import os
import signal
from playwright.async_api import async_playwright, expect

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏
BASE_URL = "http://localhost:5003"  # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ª–æ–∫–∞–ª—å–Ω–æ
ADMIN_USERNAME = "tsyndra"
ADMIN_PASSWORD = "We5fb2k93s71!"

class AppTester:
    def __init__(self):
        self.app_process = None
        self.browser = None
        self.context = None
        self.page = None
        
    async def start_app(self):
        """–ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è Flask"""
        print("üöÄ –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è...")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞–ø—É—â–µ–Ω–æ –ª–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —É–∂–µ
        try:
            import requests
            response = requests.get(BASE_URL, timeout=2)
            if response.status_code in [200, 302]:
                print("‚úÖ –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —É–∂–µ –∑–∞–ø—É—â–µ–Ω–æ")
                return
        except:
            pass
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
        venv_python = "/home/workdir/cash_shifts/venv/bin/python"
        self.app_process = subprocess.Popen(
            [venv_python, "app.py"],
            cwd="/home/workdir/cash_shifts",
            stdout=subprocess.PIPE,
            stderr=subprocess.PIPE,
            preexec_fn=os.setsid
        )
        
        # –ñ–¥–µ–º –∑–∞–ø—É—Å–∫–∞
        max_wait = 30
        for i in range(max_wait):
            try:
                import requests
                response = requests.get(BASE_URL, timeout=2)
                if response.status_code in [200, 302]:
                    print("‚úÖ –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∑–∞–ø—É—â–µ–Ω–æ")
                    time.sleep(2)  # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø–∞—É–∑–∞ –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
                    return
            except:
                pass
            time.sleep(1)
        
        raise Exception("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ")
    
    async def stop_app(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
        if self.app_process:
            print("üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è...")
            try:
                os.killpg(os.getpgid(self.app_process.pid), signal.SIGTERM)
                self.app_process.wait(timeout=5)
            except:
                pass
            print("‚úÖ –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
    
    async def setup_browser(self, playwright):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±—Ä–∞—É–∑–µ—Ä–∞"""
        print("üåê –ó–∞–ø—É—Å–∫ –±—Ä–∞—É–∑–µ—Ä–∞...")
        self.browser = await playwright.chromium.launch(
            headless=True,
            args=['--no-sandbox', '--disable-dev-shm-usage']
        )
        self.context = await self.browser.new_context(
            viewport={'width': 1920, 'height': 1080},
            locale='ru-RU'
        )
        self.page = await self.context.new_page()
        print("‚úÖ –ë—Ä–∞—É–∑–µ—Ä –∑–∞–ø—É—â–µ–Ω")
    
    async def close_browser(self):
        """–ó–∞–∫—Ä—ã—Ç–∏–µ –±—Ä–∞—É–∑–µ—Ä–∞"""
        if self.context:
            await self.context.close()
        if self.browser:
            await self.browser.close()
        print("‚úÖ –ë—Ä–∞—É–∑–µ—Ä –∑–∞–∫—Ä—ã—Ç")
    
    async def test_login(self):
        """–¢–µ—Å—Ç –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏"""
        print("\nüìù –¢–µ—Å—Ç 1: –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è")
        
        # –°–ª—É—à–∞–µ–º –∫–æ–Ω—Å–æ–ª—å –±—Ä–∞—É–∑–µ—Ä–∞
        self.page.on("console", lambda msg: print(f"  üñ•Ô∏è –ö–æ–Ω—Å–æ–ª—å [{msg.type}]: {msg.text}"))
        self.page.on("pageerror", lambda exc: print(f"  ‚ùå –û—à–∏–±–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã: {exc}"))
        
        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –ª–æ–≥–∏–Ω–∞
        await self.page.goto(f"{BASE_URL}/login")
        await self.page.wait_for_load_state('networkidle')
        
        # –í–≤–æ–¥–∏–º –¥–∞–Ω–Ω—ã–µ
        await self.page.fill('input[name="username"]', ADMIN_USERNAME)
        await self.page.fill('input[name="password"]', ADMIN_PASSWORD)
        
        # –ù–∞–∂–∏–º–∞–µ–º –∫–Ω–æ–ø–∫—É –≤—Ö–æ–¥–∞
        await self.page.click('button[type="submit"]')
        
        # –ñ–¥–µ–º —Ä–µ–¥–∏—Ä–µ–∫—Ç–∞ –Ω–∞ –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
        await self.page.wait_for_url(f"{BASE_URL}/", timeout=10000)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –º—ã –Ω–∞ –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ
        assert self.page.url == f"{BASE_URL}/", f"–ù–µ –ø—Ä–æ–∏–∑–æ—à–µ–ª —Ä–µ–¥–∏—Ä–µ–∫—Ç –Ω–∞ –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É. –¢–µ–∫—É—â–∏–π URL: {self.page.url}"
        
        print("‚úÖ –¢–µ—Å—Ç –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –ø—Ä–æ–π–¥–µ–Ω")
    
    async def test_load_branches(self):
        """–¢–µ—Å—Ç –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∏–ª–∏–∞–ª–æ–≤"""
        print("\nüè¢ –¢–µ—Å—Ç 2: –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∏–ª–∏–∞–ª–æ–≤")
        
        # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä–∏–º —á—Ç–æ –º—ã –Ω–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ
        print(f"  –¢–µ–∫—É—â–∏–π URL: {self.page.url}")
        
        # –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        await self.page.wait_for_load_state('networkidle')
        
        # –ü—Ä–æ–≤–µ—Ä–∏–º —á—Ç–æ –µ—Å—Ç—å –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
        page_content = await self.page.content()
        if 'branchSelect' not in page_content:
            print("  ‚ùå –≠–ª–µ–º–µ–Ω—Ç #branchSelect –Ω–µ –Ω–∞–π–¥–µ–Ω –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ")
            print(f"  –°–æ–¥–µ—Ä–∂–∏–º–æ–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã: {page_content[:500]}...")
            return
        
        # –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ —Å–µ–ª–µ–∫—Ç–∞ —Ñ–∏–ª–∏–∞–ª–æ–≤
        await self.page.wait_for_selector('#branchSelect', timeout=20000)
        
        # –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ –æ–ø—Ü–∏–π
        await self.page.wait_for_timeout(2000)
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ñ–∏–ª–∏–∞–ª–æ–≤
        branches = await self.page.eval_on_selector(
            '#branchSelect',
            'select => Array.from(select.options).map(o => o.text)'
        )
        
        print(f"  –ù–∞–π–¥–µ–Ω–æ —Ñ–∏–ª–∏–∞–ª–æ–≤: {len(branches)}")
        for branch in branches:
            print(f"    - {branch}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –µ—Å—Ç—å —Ö–æ—Ç—è –±—ã "–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∏–ª–∏–∞–ª..." + —Ä–µ–∞–ª—å–Ω—ã–µ —Ñ–∏–ª–∏–∞–ª—ã
        assert len(branches) > 1, f"–ù–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã —Ñ–∏–ª–∏–∞–ª—ã. –ù–∞–π–¥–µ–Ω–æ: {branches}"
        
        print("‚úÖ –¢–µ—Å—Ç –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∏–ª–∏–∞–ª–æ–≤ –ø—Ä–æ–π–¥–µ–Ω")
    
    async def test_load_cash_shifts(self):
        """–¢–µ—Å—Ç –∑–∞–≥—Ä—É–∑–∫–∏ –∫–∞—Å—Å–æ–≤—ã—Ö —Å–º–µ–Ω"""
        print("\nüí∞ –¢–µ—Å—Ç 3: –ó–∞–≥—Ä—É–∑–∫–∞ –∫–∞—Å—Å–æ–≤—ã—Ö —Å–º–µ–Ω")
        
        # –í—ã–±–∏—Ä–∞–µ–º –ø–µ—Ä–≤—ã–π —Ñ–∏–ª–∏–∞–ª (–Ω–µ "–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∏–ª–∏–∞–ª")
        await self.page.select_option('#branchSelect', index=1)
        
        # –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ —Å–º–µ–Ω –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ñ–∏–ª–∏–∞–ª–∞
        await self.page.wait_for_timeout(3000)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –ø–æ—è–≤–∏–ª–∏—Å—å —Å–º–µ–Ω—ã
        cash_shift_select = await self.page.query_selector('#cashShiftSelect')
        if cash_shift_select:
            options = await cash_shift_select.eval_on_selector_all('option', 'options => options.length')
            print(f"  –ù–∞–π–¥–µ–Ω–æ –æ–ø—Ü–∏–π –≤ —Å–µ–ª–µ–∫—Ç–µ —Å–º–µ–Ω: {options}")
            
            if options > 1:  # –ï—Å—Ç—å —Å–º–µ–Ω—ã –∫—Ä–æ–º–µ "–í—ã–±–µ—Ä–∏—Ç–µ —Å–º–µ–Ω—É..."
                # –í—ã–±–∏—Ä–∞–µ–º –ø–µ—Ä–≤—É—é —Å–º–µ–Ω—É
                await self.page.select_option('#cashShiftSelect', index=1)
                await self.page.wait_for_timeout(1000)
                
                # –¢–µ–ø–µ—Ä—å –∫–Ω–æ–ø–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –∞–∫—Ç–∏–≤–Ω–∞
                button_enabled = await self.page.eval_on_selector('#loadCashShiftBtn', 'btn => !btn.disabled')
                print(f"  –ö–Ω–æ–ø–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞: {button_enabled}")
                
                if button_enabled:
                    # –ù–∞–∂–∏–º–∞–µ–º –∫–Ω–æ–ø–∫—É –∑–∞–≥—Ä—É–∑–∫–∏
                    await self.page.click('#loadCashShiftBtn')
                else:
                    print("  ‚ö†Ô∏è  –ö–Ω–æ–ø–∫–∞ –≤—Å–µ –µ—â–µ –Ω–µ–∞–∫—Ç–∏–≤–Ω–∞")
            else:
                print("  ‚ö†Ô∏è  –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–º–µ–Ω –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ñ–∏–ª–∏–∞–ª–∞")
        else:
            print("  ‚ö†Ô∏è  –°–µ–ª–µ–∫—Ç —Å–º–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω")
        
        # –ñ–¥–µ–º –ø–æ—è–≤–ª–µ–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã –∏–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
        try:
            await self.page.wait_for_selector('#cash_shifts_table tbody tr', timeout=15000)
            
            # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–º–µ–Ω
            shifts_count = await self.page.eval_on_selector_all(
                '#cash_shifts_table tbody tr',
                'rows => rows.length'
            )
            
            print(f"  –ó–∞–≥—Ä—É–∂–µ–Ω–æ –∫–∞—Å—Å–æ–≤—ã—Ö —Å–º–µ–Ω: {shifts_count}")
            
            assert shifts_count > 0, "–ù–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∫–∞—Å—Å–æ–≤—ã–µ —Å–º–µ–Ω—ã"
            
            print("‚úÖ –¢–µ—Å—Ç –∑–∞–≥—Ä—É–∑–∫–∏ –∫–∞—Å—Å–æ–≤—ã—Ö —Å–º–µ–Ω –ø—Ä–æ–π–¥–µ–Ω")
            
        except Exception as e:
            print(f"‚ö†Ô∏è  –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∫–∞—Å—Å–æ–≤—ã—Ö —Å–º–µ–Ω: {e}")
            print("  (—ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ, –µ—Å–ª–∏ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–º–µ–Ω)")
    
    async def test_view_shift_details(self):
        """–¢–µ—Å—Ç –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–µ—Ç–∞–ª–µ–π —Å–º–µ–Ω—ã"""
        print("\nüîç –¢–µ—Å—Ç 4: –ü—Ä–æ—Å–º–æ—Ç—Ä –¥–µ—Ç–∞–ª–µ–π —Å–º–µ–Ω—ã")
        
        try:
            # –ò—â–µ–º –ø–µ—Ä–≤—É—é —Å—Ç—Ä–æ–∫—É –≤ —Ç–∞–±–ª–∏—Ü–µ
            first_row = await self.page.query_selector('#cashShiftsTable tbody tr')
            
            if first_row:
                # –ö–ª–∏–∫–∞–µ–º –Ω–∞ –ø–µ—Ä–≤—É—é —Å—Ç—Ä–æ–∫—É
                await first_row.click()
                await self.page.wait_for_timeout(2000)
                
                # –ò—â–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –∏–ª–∏ —Ç–∞–±–ª–∏—Ü—É —Å –ø–ª–∞—Ç–µ–∂–∞–º–∏
                payments_visible = await self.page.is_visible('#payments_table')
                
                if payments_visible:
                    print("‚úÖ –¢–µ—Å—Ç –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–µ—Ç–∞–ª–µ–π —Å–º–µ–Ω—ã –ø—Ä–æ–π–¥–µ–Ω")
                else:
                    print("‚ö†Ô∏è  –î–µ—Ç–∞–ª–∏ —Å–º–µ–Ω—ã –Ω–µ –æ—Ç–æ–±—Ä–∞–∂–∞—é—Ç—Å—è")
            else:
                print("‚ö†Ô∏è  –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–º–µ–Ω –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞")
                
        except Exception as e:
            print(f"‚ö†Ô∏è  –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ –¥–µ—Ç–∞–ª–µ–π: {e}")
    
    async def test_logout(self):
        """–¢–µ—Å—Ç –≤—ã—Ö–æ–¥–∞ –∏–∑ —Å–∏—Å—Ç–µ–º—ã"""
        print("\nüö™ –¢–µ—Å—Ç 5: –í—ã—Ö–æ–¥ –∏–∑ —Å–∏—Å—Ç–µ–º—ã")
        
        # –ò—â–µ–º –∫–Ω–æ–ø–∫—É –≤—ã—Ö–æ–¥–∞
        logout_button = await self.page.query_selector('a[href="/logout"]')
        
        if logout_button:
            await logout_button.click()
            await self.page.wait_for_load_state('networkidle')
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–¥–∏—Ä–µ–∫—Ç –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –ª–æ–≥–∏–Ω–∞
            assert '/login' in self.page.url, "–ù–µ –ø—Ä–æ–∏–∑–æ—à–µ–ª —Ä–µ–¥–∏—Ä–µ–∫—Ç –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –ª–æ–≥–∏–Ω–∞"
            
            print("‚úÖ –¢–µ—Å—Ç –≤—ã—Ö–æ–¥–∞ –ø—Ä–æ–π–¥–µ–Ω")
        else:
            print("‚ö†Ô∏è  –ö–Ω–æ–ø–∫–∞ –≤—ã—Ö–æ–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
    
    async def run_all_tests(self):
        """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤"""
        print("="*60)
        print("üß™ –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï CASH SHIFTS")
        print("="*60)
        
        # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤
        os.makedirs('screenshots', exist_ok=True)
        
        async with async_playwright() as playwright:
            try:
                # –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
                await self.start_app()
                
                # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±—Ä–∞—É–∑–µ—Ä
                await self.setup_browser(playwright)
                
                # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã
                await self.test_login()
                await self.test_load_branches()
                await self.test_load_cash_shifts()
                await self.test_view_shift_details()
                await self.test_logout()
                
                # –§–∏–Ω–∞–ª—å–Ω—ã–π —Å–∫—Ä–∏–Ω—à–æ—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
                await self.page.goto(f"{BASE_URL}/login")
                await self.page.wait_for_load_state('networkidle')
                await self.page.screenshot(path='screenshots/final_state.png', full_page=True)
                
                print("\n" + "="*60)
                print("‚úÖ –í–°–ï –¢–ï–°–¢–´ –í–´–ü–û–õ–ù–ï–ù–´")
                print("üì∏ –§–∏–Ω–∞–ª—å–Ω—ã–π —Å–∫—Ä–∏–Ω—à–æ—Ç: screenshots/final_state.png")
                print("="*60)
                
            except Exception as e:
                print(f"\n‚ùå –û–®–ò–ë–ö–ê: {e}")
                if self.page:
                    await self.page.screenshot(path='screenshots/error_state.png', full_page=True)
                    print("üì∏ –°–∫—Ä–∏–Ω—à–æ—Ç –æ—à–∏–±–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω: screenshots/error_state.png")
                raise
                
            finally:
                # –ó–∞–∫—Ä—ã–≤–∞–µ–º –±—Ä–∞—É–∑–µ—Ä
                await self.close_browser()
                
                # –ù–µ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ, –µ—Å–ª–∏ –æ–Ω–æ –±—ã–ª–æ –∑–∞–ø—É—â–µ–Ω–æ –¥–æ —Ç–µ—Å—Ç–æ–≤
                # await self.stop_app()

async def main():
    tester = AppTester()
    await tester.run_all_tests()

if __name__ == "__main__":
    asyncio.run(main())

