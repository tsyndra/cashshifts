import requests
import json
from datetime import datetime, timedelta
import urllib3

# –û—Ç–∫–ª—é—á–∞–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –æ SSL
urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è API
IIKO_API_KEY = "your-api-key-here"  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à API –∫–ª—é—á
IIKO_API_URL = "https://api-ru.iiko.services/api/1"

def get_iiko_bearer_token():
    """–ü–æ–ª—É—á–∞–µ—Ç bearer token –¥–ª—è –Ω–æ–≤–æ–≥–æ API iiko"""
    try:
        auth_url = "https://api-ru.iiko.services/api/1/access_token"
        
        # –î–∞–Ω–Ω—ã–µ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞ —Å–æ–≥–ª–∞—Å–Ω–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏
        auth_data = {
            "apiLogin": IIKO_API_KEY
        }
        
        response = requests.post(auth_url, json=auth_data, verify=False, timeout=30)
        
        if response.status_code == 200:
            data = response.json()
            token = data.get('token')
            if token:
                print(f"‚úÖ Bearer token –ø–æ–ª—É—á–µ–Ω: {token[:20]}...")
                return token
            else:
                print("‚ùå –¢–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –æ—Ç–≤–µ—Ç–µ")
                return None
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞: {response.status_code} - {response.text}")
            return None
            
    except Exception as e:
        print(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç–æ–∫–µ–Ω–∞: {e}")
        return None

def get_branches():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–π —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Ñ–∏–ª–∏–∞–ª–æ–≤"""
    # –°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–π —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Ñ–∏–ª–∏–∞–ª–æ–≤ —Å –∏—Ö –∞–¥—Ä–µ—Å–∞–º–∏
    branches = [
        {
            "id": "butovo",
            "name": "–ë—É—Ç–æ–≤–æ", 
            "base_url": "https://dostavka-hatimaki-butovo.iiko.it:443/resto/api"
        },
        {
            "id": "yasenevo",
            "name": "–Ø—Å–µ–Ω–µ–≤–æ",
            "base_url": "https://hatimakiyasenevo.iiko.it:443/resto/api"
        },
        {
            "id": "kommunarka", 
            "name": "–ö–æ–º–º—É–Ω–∞—Ä–∫–∞",
            "base_url": "https://dostavka-hatimaki-kommunarka.iiko.it:443/resto/api"
        },
        {
            "id": "podolsk",
            "name": "–ü–æ–¥–æ–ª—å—Å–∫", 
            "base_url": "https://dostavka-hatimaki-podolsk.iiko.it:443/resto/api"
        },
        {
            "id": "moskovskii",
            "name": "–ú–æ—Å–∫–æ–≤—Å–∫–∏–π",
            "base_url": "https://dostavka-hatimaki-moskovskii.iiko.it:443/resto/api"
        },
        {
            "id": "etalon",
            "name": "–≠—Ç–∞–ª–æ–Ω",
            "base_url": "https://dostavka-hatimaki-etalon.iiko.it:443/resto/api"
        },
        {
            "id": "bobrovo",
            "name": "–ë–æ–±—Ä–æ–≤–æ",
            "base_url": "https://dostavka-hatimaki-bobrovo.iiko.it:443/resto/api"
        },
        {
            "id": "scherbinka",
            "name": "–©–µ—Ä–±–∏–Ω–∫–∞ (–°—Ç–µ–ø–∞–Ω–æ)",
            "base_url": "https://hatimaki-scherbinka-ip-stepano.iiko.it:443/resto/api"
        },
        {
            "id": "monahovo",
            "name": "–ú–æ–Ω–∞—Ö–æ–≤–æ (–¢–∞—â–∏–ª–∏)",
            "base_url": "https://hatimaki-monahovoi-ip-taschili.iiko.it:443/resto/api"
        },
        {
            "id": "40let",
            "name": "40 –ª–µ—Ç",
            "base_url": "https://hatimaki-40-let.iiko.it:443/resto/api"
        },
        {
            "id": "skandinaviya",
            "name": "–°–∫–∞–Ω–¥–∏–Ω–∞–≤–∏—è",
            "base_url": "https://hatimaki-skandinaviya.iiko.it:443/resto/api"
        },
        {
            "id": "ispaniya",
            "name": "–ò—Å–ø–∞–Ω–∏—è", 
            "base_url": "https://hatimaki-ispaniya.iiko.it:443/resto/api"
        },
        {
            "id": "novovatutinskaya",
            "name": "–ù–æ–≤–æ–≤–∞—Ç—É—Ç–∏–Ω—Å–∫–∞—è",
            "base_url": "https://hatimaki-novovatutinskaya.iiko.it:443/resto/api"
        },
        {
            "id": "luchi",
            "name": "–õ—É—á–∏",
            "base_url": "https://hatimaki-luchi.iiko.it:443/resto/api"
        }
    ]
    
    print(f"‚úÖ –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–π —Å–ø–∏—Å–æ–∫ –∏–∑ {len(branches)} —Ñ–∏–ª–∏–∞–ª–æ–≤")
    return branches

def get_branches_old():
    """–°—Ç–∞—Ä–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ñ–∏–ª–∏–∞–ª–æ–≤ —á–µ—Ä–µ–∑ API (–Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è)"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º bearer token
        token = get_iiko_bearer_token()
        if not token:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å bearer token, –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback")
            return get_fallback_branches()
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–π —Å–æ–≥–ª–∞—Å–Ω–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ API v1
        headers = {
            "Authorization": f"Bearer {token}",
            "Content-Type": "application/json"
        }
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π endpoint —Å–æ–≥–ª–∞—Å–Ω–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏
        response = requests.get(f"{IIKO_API_URL}/organizations", headers=headers, verify=False, timeout=30)
        
        if response.status_code == 200:
            data = response.json()
            organizations = data.get('organizations', [])
            
            print(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–æ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–π –∏–∑ API: {len(organizations)}")
            
            branches = []
            for org in organizations:
                # –°–æ–≥–ª–∞—Å–Ω–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏, –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è —Å–æ–¥–µ—Ä–∂–∏—Ç id, name –∏ –¥—Ä—É–≥–∏–µ –ø–æ–ª—è
                branches.append({
                    "id": org.get('id'),
                    "name": org.get('name'),
                    "base_url": f"https://{org.get('domain')}/resto/api" if org.get('domain') else None
                })
                print(f"  üè¢ {org.get('name')} (ID: {org.get('id')})")
            
            return branches
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–π: {response.status_code} - {response.text}")
            return get_fallback_branches()
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–π: {e}")
        return get_fallback_branches()

def get_fallback_branches():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Ñ–∏–ª–∏–∞–ª–æ–≤, –ø–æ–ª—É—á–µ–Ω–Ω—ã—Ö —á–µ—Ä–µ–∑ —Å—Ç–∞—Ä—ã–π API"""
    print("üîÑ –ü–æ–ª—É—á–∞–µ–º –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ —Å—Ç–∞—Ä—ã–π API...")
    
    # –ü–æ–ª–Ω—ã–π —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –¥–æ–º–µ–Ω–æ–≤ Hatimaki
    known_domains = [
        {"domain": "dostavka-hatimaki-butovo.iiko.it:443", "name": "–ë—É—Ç–æ–≤–æ", "id": "butovo"},
        {"domain": "hatimakiyasenevo.iiko.it:443", "name": "–Ø—Å–µ–Ω–µ–≤–æ", "id": "yasenevo"},
        {"domain": "dostavka-hatimaki-kommunarka.iiko.it:443", "name": "–ö–æ–º–º—É–Ω–∞—Ä–∫–∞", "id": "kommunarka"},
        {"domain": "dostavka-hatimaki-podolsk.iiko.it:443", "name": "–ü–æ–¥–æ–ª—å—Å–∫", "id": "podolsk"},
        {"domain": "dostavka-hatimaki-moskovskii.iiko.it:443", "name": "–ú–æ—Å–∫–æ–≤—Å–∫–∏–π", "id": "moskovskii"},
        {"domain": "dostavka-hatimaki-etalon.iiko.it:443", "name": "–≠—Ç–∞–ª–æ–Ω", "id": "etalon"},
        {"domain": "dostavka-hatimaki-bobrovo.iiko.it:443", "name": "–ë–æ–±—Ä–æ–≤–æ", "id": "bobrovo"},
        {"domain": "hatimaki-scherbinka-ip-stepano.iiko.it:443", "name": "–©–µ—Ä–±–∏–Ω–∫–∞ (–°—Ç–µ–ø–∞–Ω–æ)", "id": "scherbinka-stepano"},
        {"domain": "hatimaki-monahovoi-ip-taschili.iiko.it:443", "name": "–ú–æ–Ω–∞—Ö–æ–≤–æ (–¢–∞—â–∏–ª–∏)", "id": "monahovoi-taschili"},
        {"domain": "hatimaki-40-let.iiko.it:443", "name": "40 –ª–µ—Ç", "id": "40-let"},
        {"domain": "hatimaki-skandinaviya.iiko.it:443", "name": "–°–∫–∞–Ω–¥–∏–Ω–∞–≤–∏—è", "id": "skandinaviya"},
        {"domain": "hatimaki-ispaniya.iiko.it:443", "name": "–ò—Å–ø–∞–Ω–∏—è", "id": "ispaniya"},
        {"domain": "hatimaki-novovatutinskaya.iiko.it:443", "name": "–ù–æ–≤–æ–≤–∞—Ç—É—Ç–∏–Ω—Å–∫–∞—è", "id": "novovatutinskaya"},
        {"domain": "hatimaki-luchi.iiko.it:443", "name": "–õ—É—á–∏", "id": "luchi"}
    ]
    
    branches = []
    
    for domain_info in known_domains:
        try:
            domain = domain_info["domain"]
            print(f"üåê –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ–º–µ–Ω: {domain}")
            
            # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏
            old_api_url = f"https://{domain}/resto/api"
            auth_url = f"{old_api_url}/auth"
            auth_params = {
                "login": "tsyndra",
                "pass": "cb084e5e5f9bfc6cf6c705a382817739c8aebeac"  # SHA1 —Ö–µ—à
            }
            
            auth_response = requests.get(auth_url, params=auth_params, verify=False, timeout=10)
            
            if auth_response.status_code == 200:
                token = auth_response.text.strip()
                print(f"‚úÖ –î–æ–º–µ–Ω {domain} –¥–æ—Å—Ç—É–ø–µ–Ω, —Ç–æ–∫–µ–Ω: {token[:20]}...")
                
                branches.append({
                    "id": domain_info["id"],
                    "name": domain_info["name"],
                    "base_url": old_api_url
                })
            else:
                print(f"‚ùå –î–æ–º–µ–Ω {domain} –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {auth_response.status_code}")
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –¥–ª—è –¥–æ–º–µ–Ω–∞ {domain_info['domain']}: {e}")
    
    if not branches:
        print("üîÑ –ù–∏ –æ–¥–∏–Ω –¥–æ–º–µ–Ω –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–∞—Ö–∞—Ä–¥–∫–æ–∂–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫")
        branches = [
            {
                "id": "novovatutinskaya",
                "name": "–ù–æ–≤–æ–≤–∞—Ç—É—Ç–∏–Ω—Å–∫–∞—è",
                "base_url": "https://hatimaki-novovatutinskaya.iiko.it:443/resto/api"
            }
        ]
    
    print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–π: {len(branches)}")
    return branches

def get_branch_name(branch_id):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ–∏–ª–∏–∞–ª–∞ –ø–æ ID"""
    branches = get_branches()
    for branch in branches:
        if branch['id'] == branch_id:
            return branch['name']
    return "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ñ–∏–ª–∏–∞–ª"

def get_cash_shifts_v2(organization_id, token, from_date=None, to_date=None):
    """–ü–æ–ª—É—á–∞–µ—Ç –∫–∞—Å—Å–æ–≤—ã–µ —Å–º–µ–Ω—ã —á–µ—Ä–µ–∑ –Ω–æ–≤—ã–π API v2 —Å–æ–≥–ª–∞—Å–Ω–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏"""
    try:
        if not from_date:
            from_date = (datetime.now() - timedelta(days=30)).strftime('%Y-%m-%d')
        if not to_date:
            to_date = datetime.now().strftime('%Y-%m-%d')
        
        headers = {
            "Authorization": f"Bearer {token}",
            "Content-Type": "application/json"
        }
        
        # –î–∞–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å–∞ —Å–æ–≥–ª–∞—Å–Ω–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ –∫–∞—Å—Å–æ–≤—ã—Ö —Å–º–µ–Ω v2
        request_data = {
            "organizationIds": [organization_id],
            "from": from_date,
            "to": to_date
        }
        
        response = requests.post(
            f"{IIKO_API_URL}/cash_shifts", 
            json=request_data, 
            headers=headers, 
            verify=False, 
            timeout=30
        )
        
        if response.status_code == 200:
            data = response.json()
            cash_shifts = data.get('cashShifts', [])
            
            print(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–æ –∫–∞—Å—Å–æ–≤—ã—Ö —Å–º–µ–Ω —á–µ—Ä–µ–∑ API v2: {len(cash_shifts)}")
            
            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —Ñ–æ—Ä–º–∞—Ç, —Å–æ–≤–º–µ—Å—Ç–∏–º—ã–π —Å–æ —Å—Ç–∞—Ä—ã–º API
            shifts = []
            for shift in cash_shifts:
                shifts.append({
                    "id": shift.get('id'),
                    "openDate": shift.get('openDate'),
                    "closeDate": shift.get('closeDate'),
                    "cashierName": shift.get('cashierName', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∫–∞—Å—Å–∏—Ä'),
                    "cashierId": shift.get('cashierId')
                })
            
            return shifts
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–∞—Å—Å–æ–≤—ã—Ö —Å–º–µ–Ω v2: {response.status_code} - {response.text}")
            return []
            
    except Exception as e:
        print(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–∞—Å—Å–æ–≤—ã—Ö —Å–º–µ–Ω v2: {e}")
        return []

def get_auth_token(login, password, branch_id=None):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏"""
    # –ü–æ–ª—É—á–∞–µ–º base_url –¥–ª—è —Ñ–∏–ª–∏–∞–ª–∞
    branches = get_branches()
    if branch_id:
        branch_data = next((b for b in branches if b['id'] == branch_id), None)
        if not branch_data:
            print(f"–§–∏–ª–∏–∞–ª {branch_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return None
        base_url = branch_data['base_url']
    else:
        # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–≤—ã–π —Ñ–∏–ª–∏–∞–ª
        if branches:
            base_url = branches[0]['base_url']
        else:
            print("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ñ–∏–ª–∏–∞–ª–æ–≤")
            return None
    
    auth_url = f"{base_url}/auth"
    params = {
        "login": login,
        "pass": password  # –û–∂–∏–¥–∞–µ—Ç—Å—è SHA1 —Ö–µ—à
    }
    
    try:
        response = requests.get(auth_url, params=params, verify=False, timeout=30)
        response.raise_for_status()
        token = response.text.strip()
        print(f"Successfully obtained token for {branch_id}: {token}")
        return token
    except requests.exceptions.RequestException as e:
        print(f"Error getting authentication token: {e}")
        return None

def get_cash_shifts(token, branch_id=None):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∫–∞—Å—Å–æ–≤—ã—Ö —Å–º–µ–Ω"""
    # –ü–æ–ª—É—á–∞–µ–º base_url –¥–ª—è —Ñ–∏–ª–∏–∞–ª–∞
    branches = get_branches()
    if branch_id:
        branch_data = next((b for b in branches if b['id'] == branch_id), None)
        if not branch_data:
            print(f"–§–∏–ª–∏–∞–ª {branch_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return None
        base_url = branch_data['base_url']
    else:
        if branches:
            base_url = branches[0]['base_url']
        else:
            print("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ñ–∏–ª–∏–∞–ª–æ–≤")
            return None
    
    # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—Ä–æ—Å–∞
    today = datetime.now().date()
    week_ago = today - timedelta(days=7)
    yesterday = today - timedelta(days=1)
    
    params = {
        "status": "ANY",
        "revisionFrom": -1,
        "openDateFrom": week_ago.strftime("%Y-%m-%d"),
        "openDateTo": yesterday.strftime("%Y-%m-%d")
    }
    
    try:
        url = f"{base_url}/v2/cashshifts/list?key={token}"
        response = requests.get(url, params=params, verify=False, timeout=30)
        response.raise_for_status()
        cash_shifts = response.json()
        print(f"Successfully retrieved {len(cash_shifts)} cash shifts")
        return cash_shifts
    except requests.exceptions.RequestException as e:
        print(f"Error getting cash shifts: {e}")
        if hasattr(e, 'response') and e.response is not None:
            print(e.response.text)
        return None

def get_cash_shift_payments(token, session_id, branch_id=None):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–µ–π –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π —Å–º–µ–Ω—ã"""
    # –ü–æ–ª—É—á–∞–µ–º base_url –¥–ª—è —Ñ–∏–ª–∏–∞–ª–∞
    branches = get_branches()
    if branch_id:
        branch_data = next((b for b in branches if b['id'] == branch_id), None)
        if not branch_data:
            print(f"–§–∏–ª–∏–∞–ª {branch_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return None
        base_url = branch_data['base_url']
    else:
        if branches:
            base_url = branches[0]['base_url']
        else:
            print("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ñ–∏–ª–∏–∞–ª–æ–≤")
            return None
    
    url = f"{base_url}/v2/cashshifts/payments/list/{session_id}?key={token}"
    params = {"hideAccepted": "false"}
    
    try:
        response = requests.get(url, params=params, verify=False, timeout=30)
        response.raise_for_status()
        return response.json()
    except requests.exceptions.RequestException as e:
        print(f"Error getting payments for cash shift {session_id}: {e}")
        if hasattr(e, 'response') and e.response is not None:
            print(e.response.text)
        return None

def main():
    """–¢–µ—Å—Ç–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    # –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    login = "tsyndra"
    password = "cb084e5e5f9bfc6cf6c705a382817739c8aebeac"  # SHA1 —Ö–µ—à
    branch_id = "novovatutinskaya"
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω
    token = get_auth_token(login, password, branch_id)
    if not token:
        print("Failed to get authentication token. Exiting...")
        return
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–º–µ–Ω—ã
    cash_shifts = get_cash_shifts(token, branch_id)
    if cash_shifts:
        print(f"\n–ü–æ–ª—É—á–µ–Ω–æ {len(cash_shifts)} —Å–º–µ–Ω")
        
        # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—É—é —Å–º–µ–Ω—É –¥–ª—è —Ç–µ—Å—Ç–∞
        if len(cash_shifts) > 0:
            test_shift = cash_shifts[0]
            session_id = test_shift.get("id")
            print(f"\n–ü–æ–ª—É—á–∞–µ–º –ø–ª–∞—Ç–µ–∂–∏ –¥–ª—è —Å–º–µ–Ω—ã: {session_id}")
            
            payments = get_cash_shift_payments(token, session_id, branch_id)
            if payments:
                print(f"–ü–æ–ª—É—á–µ–Ω–æ –ø–ª–∞—Ç–µ–∂–µ–π:")
                print(f"- –ë–µ–∑–Ω–∞–ª–∏—á–Ω—ã—Ö: {len(payments.get('cashlessRecords', []))}")
                print(f"- –í–Ω–µ—Å–µ–Ω–∏–π: {len(payments.get('payInRecords', []))}")
                print(f"- –í—ã–¥–∞—á: {len(payments.get('payOutsRecords', []))}")

if __name__ == "__main__":
    main()
