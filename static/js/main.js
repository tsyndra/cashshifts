/**
 * Cash Shifts - –ì–ª–∞–≤–Ω—ã–π —Å–∫—Ä–∏–ø—Ç –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
 * –û—á–∏—â–µ–Ω–Ω–∞—è –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è –±–µ–∑ –¥–µ–±–∞–≥-—Å–æ–æ–±—â–µ–Ω–∏–π
 * VERSION: 2025-10-15-16:23 - CLEAN BUILD
 */

let cashShiftData = null;
let bankData = null;
let bankColumns = [];

$(document).ready(function() {
    // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∏–ª–∏–∞–ª—ã
    loadBranches();
    
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
    $('#branchSelect').on('change', onBranchChange);
    $('#cashShiftSelect').on('change', onCashShiftChange);
    $('#loadCashShiftBtn').on('click', loadCashShiftData);
    $('#bankReportFile').on('change', onBankReportFileSelected);
    $('#uploadBankReportBtn').on('click', uploadBankReport);
    $('#compareBtn').on('click', compareData);
});

function loadBranches() {
    $.ajax({
        url: '/api/branches',
        method: 'GET',
        success: function(branches) {
            const select = $('#branchSelect');
            select.empty().append('<option value="">–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∏–ª–∏–∞–ª...</option>');
            branches.forEach(branch => {
                select.append(`<option value="${branch.id}">${branch.name}</option>`);
            });
        },
        error: function(xhr) {
            console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∏–ª–∏–∞–ª–æ–≤:', xhr.status);
            showError('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∏–ª–∏–∞–ª–æ–≤: ' + (xhr.responseJSON?.error || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'));
        }
    });
}

function onBranchChange() {
    const branchId = $(this).val();
    const cashShiftSelect = $('#cashShiftSelect');
    
    // –°–∫—Ä—ã–≤–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ
    $('#cashShiftInfo').hide();
    $('#operationsTableContainer').hide();
    $('#comparisonResults').hide();
    
    if (!branchId) {
        cashShiftSelect.prop('disabled', true).empty()
            .append('<option value="">–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ —Ñ–∏–ª–∏–∞–ª...</option>');
        $('#loadCashShiftBtn').prop('disabled', true);
        return;
    }
    
    // –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–∞—Å—Å–æ–≤—ã–µ —Å–º–µ–Ω—ã –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ñ–∏–ª–∏–∞–ª–∞
    showLoading();
    $.ajax({
        url: '/api/cash-shifts',
        method: 'GET',
        data: { branch_id: branchId },
        success: function(shifts) {
            hideLoading();
            cashShiftSelect.prop('disabled', false).empty()
                .append('<option value="">–í—ã–±–µ—Ä–∏—Ç–µ —Å–º–µ–Ω—É...</option>');
            
            shifts.forEach(shift => {
                const openDate = new Date(shift.openDate).toLocaleString('ru-RU');
                const closeDate = shift.closeDate ? new Date(shift.closeDate).toLocaleString('ru-RU') : '–ù–µ –∑–∞–∫—Ä—ã—Ç–∞';
                cashShiftSelect.append(
                    `<option value="${shift.id}" data-branch-id="${branchId}">
                        ${openDate} - ${closeDate} (${shift.cashierName || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∫–∞—Å—Å–∏—Ä'})
                    </option>`
                );
            });
        },
        error: function(xhr) {
            hideLoading();
            showError('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–º–µ–Ω: ' + (xhr.responseJSON?.error || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'));
        }
    });
}

function onCashShiftChange() {
    const shiftId = $(this).val();
    $('#loadCashShiftBtn').prop('disabled', !shiftId);
    
    // –°–∫—Ä—ã–≤–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏ —Å–º–µ–Ω–µ —Å–º–µ–Ω—ã
    if (!shiftId) {
        $('#cashShiftInfo').hide();
        $('#operationsTableContainer').hide();
        $('#comparisonResults').hide();
    }
}

function loadCashShiftData() {
    const shiftId = $('#cashShiftSelect').val();
    const branchId = $('#branchSelect').val();
    
    if (!shiftId || !branchId) {
        showError('–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∏–ª–∏–∞–ª –∏ —Å–º–µ–Ω—É');
        return;
    }
    
    showLoading();
    $.ajax({
        url: `/api/cash-shift/${shiftId}/payments`,
        method: 'GET',
        data: { branch_id: branchId },
        success: function(data) {
            hideLoading();
            
            cashShiftData = data.payments;
            $('#cashShiftCount').text(cashShiftData.length);
            $('#cashShiftInfo').fadeIn('fast');
            
            // –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É (–∫—Ä–æ–º–µ –ø–µ—Ä–≤–æ–≥–æ –±–ª–æ–∫–∞ —Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –æ–ø–µ—Ä–∞—Ü–∏–π)
            $('#cashShiftInfo .alert-info:not(:first)').remove();
            
            // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ —Ç–∏–ø–∞–º –æ–ø–µ—Ä–∞—Ü–∏–π
            if (data.operationStats) {
                displayOperationStats(data.operationStats, data.totalOperations, data.totalSum);
            }
            
            // –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –æ–ø–µ—Ä–∞—Ü–∏–π
            console.log('üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ç–∞–±–ª–∏—Ü—ã:', cashShiftData);
            if (cashShiftData && cashShiftData.length > 0) {
                console.log('‚úÖ –î–∞–Ω–Ω—ã–µ –µ—Å—Ç—å, —Å–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É');
                createOperationsTable(cashShiftData);
            } else {
                console.log('‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ç–∞–±–ª–∏—Ü—ã');
            }
            
            checkCompareButton();
            showSuccess(`–ó–∞–≥—Ä—É–∂–µ–Ω–æ ${cashShiftData.length} –æ–ø–µ—Ä–∞—Ü–∏–π`);
        },
        error: function(xhr) {
            hideLoading();
            showError('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö —Å–º–µ–Ω—ã: ' + (xhr.responseJSON?.error || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'));
        }
    });
}

function onBankReportFileSelected() {
    const file = this.files[0];
    $('#uploadBankReportBtn').prop('disabled', !file);
}

function uploadBankReport() {
    const fileInput = $('#bankReportFile')[0];
    const file = fileInput.files[0];
    
    if (!file) {
        showError('–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª');
        return;
    }
    
    const formData = new FormData();
    formData.append('file', file);
    
    showLoading();
    $.ajax({
        url: '/api/upload-bank-report',
        method: 'POST',
        data: formData,
        processData: false,
        contentType: false,
        success: function(response) {
            hideLoading();
            bankData = response.data;
            bankColumns = response.columns;
            
            $('#bankReportCount').text(response.rows_count);
            $('#bankReportInfo').fadeIn('fast');
            
            // –ó–∞–ø–æ–ª–Ω—è–µ–º —Å–µ–ª–µ–∫—Ç—ã –¥–ª—è –º–∞–ø–ø–∏–Ω–≥–∞ –∫–æ–ª–æ–Ω–æ–∫
            const amountSelect = $('#amountColumn');
            const typeSelect = $('#typeColumn');
            const dateSelect = $('#dateColumn');
            
            amountSelect.empty();
            typeSelect.empty();
            dateSelect.empty().append('<option value="">–ù–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å</option>');
            
            bankColumns.forEach(col => {
                amountSelect.append(`<option value="${col}">${col}</option>`);
                typeSelect.append(`<option value="${col}">${col}</option>`);
                dateSelect.append(`<option value="${col}">${col}</option>`);
            });
            
            // –ü—ã—Ç–∞–µ–º—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∫–æ–ª–æ–Ω–∫–∏
            const amountCol = bankColumns.find(c => c.toLowerCase().includes('—Å—É–º–º–∞') || c.toLowerCase().includes('amount'));
            const typeCol = bankColumns.find(c => c.toLowerCase().includes('—Ç–∏–ø') || c.toLowerCase().includes('type') || c.toLowerCase().includes('—Å–ø–æ—Å–æ–±'));
            const dateCol = bankColumns.find(c => c.toLowerCase().includes('–¥–∞—Ç–∞') || c.toLowerCase().includes('date'));
            
            if (amountCol) amountSelect.val(amountCol);
            if (typeCol) typeSelect.val(typeCol);
            if (dateCol) dateSelect.val(dateCol);
            
            $('#columnMapping').fadeIn('fast');
            checkCompareButton();
            showSuccess(`–ó–∞–≥—Ä—É–∂–µ–Ω–æ ${response.rows_count} —Å—Ç—Ä–æ–∫ –∏–∑ –±–∞–Ω–∫–æ–≤—Å–∫–æ–≥–æ –æ—Ç—á–µ—Ç–∞`);
        },
        error: function(xhr) {
            hideLoading();
            showError('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –æ—Ç—á–µ—Ç–∞: ' + (xhr.responseJSON?.error || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'));
        }
    });
}

function checkCompareButton() {
    const canCompare = cashShiftData !== null && bankData !== null;
    $('#compareBtn').prop('disabled', !canCompare);
}

function compareData() {
    if (!cashShiftData || !bankData) {
        showError('–ó–∞–≥—Ä—É–∑–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –∫–∞—Å—Å–æ–≤–æ–π —Å–º–µ–Ω—ã –∏ –±–∞–Ω–∫–æ–≤—Å–∫–∏–π –æ—Ç—á–µ—Ç');
        return;
    }
    
    const mapping = {
        amount: $('#amountColumn').val(),
        type: $('#typeColumn').val(),
        date: $('#dateColumn').val()
    };
    
    if (!mapping.amount || !mapping.type) {
        showError('–£–∫–∞–∂–∏—Ç–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –∫–æ–ª–æ–Ω–æ–∫ –¥–ª—è —Å—É–º–º—ã –∏ —Ç–∏–ø–∞ –ø–ª–∞—Ç–µ–∂–∞');
        return;
    }
    
    showLoading();
    $.ajax({
        url: '/api/compare-data',
        method: 'POST',
        contentType: 'application/json',
        data: JSON.stringify({
            cashShiftData: cashShiftData,
            bankData: bankData,
            mapping: mapping
        }),
        success: function(response) {
            hideLoading();
            displayComparisonResults(response);
        },
        error: function(xhr) {
            hideLoading();
            showError('–û—à–∏–±–∫–∞ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è: ' + (xhr.responseJSON?.error || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'));
        }
    });
}

function displayComparisonResults(response) {
    const summary = response.summary;
    const comparison = response.comparison;
    
    // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Å–≤–æ–¥–∫—É —Å –∞–Ω–∏–º–∞—Ü–∏–µ–π
    $('#summary').html(`
        <div class="col-md-3 mb-3">
            <div class="card text-center shadow-sm border-0 animate__animated animate__fadeInUp">
                <div class="card-body">
                    <i class="fas fa-check-circle fa-2x text-success mb-2"></i>
                    <h6 class="card-title text-muted">–°–æ–≤–ø–∞–¥–µ–Ω–∏–π</h6>
                    <p class="card-text fs-3 text-success fw-bold">${summary.matchedCount}</p>
                </div>
            </div>
        </div>
        <div class="col-md-3 mb-3">
            <div class="card text-center shadow-sm border-0 animate__animated animate__fadeInUp" style="animation-delay: 0.1s">
                <div class="card-body">
                    <i class="fas fa-exclamation-triangle fa-2x text-warning mb-2"></i>
                    <h6 class="card-title text-muted">–¢–æ–ª—å–∫–æ –≤ –∫–∞—Å—Å–µ</h6>
                    <p class="card-text fs-3 text-warning fw-bold">${summary.unmatchedCashCount}</p>
                </div>
            </div>
        </div>
        <div class="col-md-3 mb-3">
            <div class="card text-center shadow-sm border-0 animate__animated animate__fadeInUp" style="animation-delay: 0.2s">
                <div class="card-body">
                    <i class="fas fa-times-circle fa-2x text-danger mb-2"></i>
                    <h6 class="card-title text-muted">–¢–æ–ª—å–∫–æ –≤ –±–∞–Ω–∫–µ</h6>
                    <p class="card-text fs-3 text-danger fw-bold">${summary.unmatchedBankCount}</p>
                </div>
            </div>
        </div>
        <div class="col-md-3 mb-3">
            <div class="card text-center shadow-sm border-0 animate__animated animate__fadeInUp" style="animation-delay: 0.3s">
                <div class="card-body">
                    <i class="fas fa-balance-scale fa-2x ${summary.totalDifference === 0 ? 'text-success' : 'text-danger'} mb-2"></i>
                    <h6 class="card-title text-muted">–†–∞–∑–Ω–∏—Ü–∞</h6>
                    <p class="card-text fs-3 ${summary.totalDifference === 0 ? 'text-success' : 'text-danger'} fw-bold">
                        ${summary.totalDifference.toFixed(2)} ‚ÇΩ
                    </p>
                </div>
            </div>
        </div>
    `);
    
    // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ç–∞–±–ª–∏—Ü—É
    const tbody = $('#comparisonTable tbody');
    tbody.empty();
    
    comparison.forEach(item => {
        const statusBadge = item.status === 'match' 
            ? '<span class="badge bg-success"><i class="fas fa-check"></i> –°–æ–≤–ø–∞–¥–µ–Ω–∏–µ</span>' 
            : '<span class="badge bg-warning"><i class="fas fa-exclamation"></i> –ù–µ—Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ</span>';
        
        const typeLabel = item.type === 'matched' ? '' :
            item.type === 'cash_only' ? '<span class="badge bg-info ms-1">–¢–æ–ª—å–∫–æ –≤ –∫–∞—Å—Å–µ</span>' :
            '<span class="badge bg-secondary ms-1">–¢–æ–ª—å–∫–æ –≤ –±–∞–Ω–∫–µ</span>';
        
        tbody.append(`
            <tr class="${item.status === 'match' ? 'table-light' : 'table-warning'}">
                <td><strong>${item.paymentType}</strong> ${typeLabel}</td>
                <td class="text-end">${item.cashAmount.toFixed(2)} ‚ÇΩ</td>
                <td class="text-end">${item.bankAmount.toFixed(2)} ‚ÇΩ</td>
                <td class="text-end ${item.difference === 0 ? 'text-success' : 'text-danger'} fw-bold">
                    ${item.difference >= 0 ? '+' : ''}${item.difference.toFixed(2)} ‚ÇΩ
                </td>
                <td class="text-center">${statusBadge}</td>
            </tr>
        `);
    });
    
    $('#comparisonResults').fadeIn('slow');
    $('html, body').animate({
        scrollTop: $('#comparisonResults').offset().top - 100
    }, 500);
}

function showLoading() {
    $('#loadingSpinner').fadeIn('fast');
}

function hideLoading() {
    $('#loadingSpinner').fadeOut('fast');
}

function showError(message) {
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º Toast –≤–º–µ—Å—Ç–æ alert
    const toast = `
        <div class="toast align-items-center text-white bg-danger border-0 position-fixed bottom-0 end-0 m-3" role="alert" style="z-index: 9999">
            <div class="d-flex">
                <div class="toast-body">
                    <i class="fas fa-exclamation-circle me-2"></i>${message}
                </div>
                <button type="button" class="btn-close btn-close-white me-2 m-auto" data-bs-dismiss="toast"></button>
            </div>
        </div>
    `;
    
    $('body').append(toast);
    const toastEl = $('.toast').last()[0];
    const bsToast = new bootstrap.Toast(toastEl, { delay: 5000 });
    bsToast.show();
    
    // –£–¥–∞–ª—è–µ–º —ç–ª–µ–º–µ–Ω—Ç –ø–æ—Å–ª–µ —Å–∫—Ä—ã—Ç–∏—è
    toastEl.addEventListener('hidden.bs.toast', function() {
        toastEl.remove();
    });
}

function showSuccess(message) {
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º Toast –≤–º–µ—Å—Ç–æ console.log
    const toast = `
        <div class="toast align-items-center text-white bg-success border-0 position-fixed bottom-0 end-0 m-3" role="alert" style="z-index: 9999">
            <div class="d-flex">
                <div class="toast-body">
                    <i class="fas fa-check-circle me-2"></i>${message}
                </div>
                <button type="button" class="btn-close btn-close-white me-2 m-auto" data-bs-dismiss="toast"></button>
            </div>
        </div>
    `;
    
    $('body').append(toast);
    const toastEl = $('.toast').last()[0];
    const bsToast = new bootstrap.Toast(toastEl, { delay: 3000 });
    bsToast.show();
    
    // –£–¥–∞–ª—è–µ–º —ç–ª–µ–º–µ–Ω—Ç –ø–æ—Å–ª–µ —Å–∫—Ä—ã—Ç–∏—è
    toastEl.addEventListener('hidden.bs.toast', function() {
        toastEl.remove();
    });
}

function displayOperationStats(operationStats, totalOperations, totalSum) {
    let statsHtml = `
        <div class="alert alert-info mt-3 border-0 shadow-sm">
            <h6 class="mb-3"><i class="fas fa-chart-pie me-2"></i><strong>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ç–∏–ø–∞–º –æ–ø–µ—Ä–∞—Ü–∏–π</strong></h6>
            <div class="row">
    `;
    
    // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–∏–ø–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏
    Object.entries(operationStats).forEach(([paymentType, stats]) => {
        statsHtml += `
            <div class="col-md-6 mb-2">
                <div class="d-flex justify-content-between align-items-center">
                    <span><i class="fas fa-money-bill-wave text-primary me-1"></i>${paymentType}:</span>
                    <span><span class="badge bg-primary">${stats.count}</span> <strong class="text-success">${stats.sum.toFixed(2)} ‚ÇΩ</strong></span>
                </div>
            </div>
        `;
    });
    
    statsHtml += `
            </div>
            <hr class="my-3">
            <div class="row">
                <div class="col-md-6">
                    <strong><i class="fas fa-list me-2"></i>–í—Å–µ–≥–æ –æ–ø–µ—Ä–∞—Ü–∏–π:</strong> <span class="badge bg-dark">${totalOperations}</span>
                </div>
                <div class="col-md-6 text-md-end">
                    <strong><i class="fas fa-ruble-sign me-2"></i>–û–±—â–∞—è —Å—É–º–º–∞:</strong> 
                    <span class="text-success fw-bold fs-5">${totalSum.toFixed(2)} ‚ÇΩ</span>
                </div>
            </div>
            <hr class="my-3">
            <div class="text-center">
                <button class="btn btn-info" onclick="openOperationsModal()">
                    <i class="fas fa-list-alt me-2"></i>–î–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç –ø–æ –æ–ø–µ—Ä–∞—Ü–∏—è–º
                </button>
            </div>
        </div>
    `;
    
    // –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã–π –±–ª–æ–∫
    $('#cashShiftInfo').append(statsHtml);
}

function createOperationsTable(operations) {
    console.log('üîç createOperationsTable –≤—ã–∑–≤–∞–Ω–∞ —Å –¥–∞–Ω–Ω—ã–º–∏:', operations);
    console.log('üîç –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–ø–µ—Ä–∞—Ü–∏–π:', operations ? operations.length : 'undefined');
    
    if (!operations || operations.length === 0) {
        console.log('‚ùå –ù–µ—Ç –æ–ø–µ—Ä–∞—Ü–∏–π –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è');
        return;
    }
    
    // –û—á–∏—â–∞–µ–º tbody
    $('#operationsTableBody').empty();
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä —Ç–∞–±–ª–∏—Ü—ã
    $('#operationsTableContainer').show();
    
    // –°–æ—Ä—Ç–∏—Ä—É–µ–º –æ–ø–µ—Ä–∞—Ü–∏–∏ –ø–æ –¥–∞—Ç–µ (–Ω–æ–≤—ã–µ —Å–≤–µ—Ä—Ö—É)
    const sortedOperations = operations.sort((a, b) => {
        const dateA = new Date(a.date || a.creationDate || '');
        const dateB = new Date(b.date || b.creationDate || '');
        return dateB - dateA;
    });
    
    let rowsHtml = '';
    sortedOperations.forEach((operation, index) => {
        // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É
        let formattedDate = '';
        try {
            const dateValue = operation.date || operation.creationDate || '';
            if (dateValue) {
                const date = new Date(dateValue);
                formattedDate = date.toLocaleString('ru-RU', {
                    year: 'numeric',
                    month: '2-digit',
                    day: '2-digit',
                    hour: '2-digit',
                    minute: '2-digit'
                });
            }
        } catch (e) {
            formattedDate = operation.date || operation.creationDate || '';
        }
        
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –æ–ø–µ—Ä–∞—Ü–∏–∏
        const operationType = operation.operationType || 'unknown';
        let operationTypeText = '';
        let operationTypeClass = '';
        
        switch (operationType) {
            case 'cashless':
                operationTypeText = '<i class="fas fa-credit-card me-1"></i>–ë–µ–∑–Ω–∞–ª–∏—á–Ω—ã–π';
                operationTypeClass = 'badge bg-primary';
                break;
            case 'payin':
                operationTypeText = '<i class="fas fa-arrow-down me-1"></i>–í–Ω–µ—Å–µ–Ω–∏–µ';
                operationTypeClass = 'badge bg-success';
                break;
            case 'payout':
                operationTypeText = '<i class="fas fa-arrow-up me-1"></i>–í—ã–¥–∞—á–∞';
                operationTypeClass = 'badge bg-warning text-dark';
                break;
            default:
                operationTypeText = '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';
                operationTypeClass = 'badge bg-secondary';
        }
        
        // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å—É–º–º—É
        const amount = parseFloat(operation.actualSum || 0);
        const formattedAmount = amount.toFixed(2) + ' ‚ÇΩ';
        
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
        const status = operation.status || 'unknown';
        let statusText = '';
        let statusClass = '';
        
        switch (status) {
            case 'SUCCESS':
            case 'COMPLETED':
                statusText = '<i class="fas fa-check-circle me-1"></i>–£—Å–ø–µ—à–Ω–æ';
                statusClass = 'badge bg-success';
                break;
            case 'FAILED':
            case 'ERROR':
                statusText = '<i class="fas fa-times-circle me-1"></i>–û—à–∏–±–∫–∞';
                statusClass = 'badge bg-danger';
                break;
            case 'PENDING':
                statusText = '<i class="fas fa-clock me-1"></i>–í –æ–±—Ä–∞–±–æ—Ç–∫–µ';
                statusClass = 'badge bg-warning text-dark';
                break;
            default:
                statusText = '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';
                statusClass = 'badge bg-secondary';
        }
        
        rowsHtml += `
            <tr class="animate-row">
                <td><small class="text-muted">${formattedDate}</small></td>
                <td><span class="${operationTypeClass}">${operationTypeText}</span></td>
                <td>${operation.paymentTypeName || '–ù–µ —É–∫–∞–∑–∞–Ω'}</td>
                <td class="text-end"><strong class="text-primary">${formattedAmount}</strong></td>
                <td><span class="${statusClass}">${statusText}</span></td>
                <td><small class="text-muted">${operation.comment || '-'}</small></td>
            </tr>
        `;
    });
    
    // –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç—Ä–æ–∫–∏ –≤ —Ç–∞–±–ª–∏—Ü—É
    $('#operationsTableBody').html(rowsHtml);
    
    // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–∞–±–ª–∏—Ü—É
    $('#operationsTableContainer').show().css('display', 'block');
    $('#operationsTable').show().css('display', 'table');
    
    console.log('‚úÖ –¢–∞–±–ª–∏—Ü–∞ —Å–æ–∑–¥–∞–Ω–∞ –∏ –ø–æ–∫–∞–∑–∞–Ω–∞!');
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ —Å –¥–µ—Ç–∞–ª—å–Ω—ã–º –æ—Ç—á–µ—Ç–æ–º
function openOperationsModal() {
    if (!cashShiftData) {
        showError('–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ–± –æ–ø–µ—Ä–∞—Ü–∏—è—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è');
        return;
    }
    
    const operations = Array.isArray(cashShiftData) ? cashShiftData : cashShiftData.operations;
    
    // –í—ã—á–∏—Å–ª—è–µ–º –æ–±—â—É—é —Å—É–º–º—É –∏–∑ –æ–ø–µ—Ä–∞—Ü–∏–π
    const totalSum = operations.reduce((sum, op) => sum + parseFloat(op.actualSum || 0), 0);
    
    // –ó–∞–ø–æ–ª–Ω—è–µ–º –æ–±—â—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
    $('#totalOperations').text(operations.length);
    $('#totalAmount').text(totalSum.toFixed(2) + ' ‚ÇΩ');
    
    // –ó–∞–ø–æ–ª–Ω—è–µ–º –ø–µ—Ä–∏–æ–¥ —Å–º–µ–Ω—ã
    if (typeof cashShiftData === 'object' && cashShiftData.shiftInfo) {
        const openDate = new Date(cashShiftData.shiftInfo.openDate);
        const closeDate = new Date(cashShiftData.shiftInfo.closeDate);
        const period = `${openDate.toLocaleString('ru-RU')} - ${closeDate.toLocaleString('ru-RU')}`;
        $('#shiftPeriod').text(period);
    } else {
        $('#shiftPeriod').text('–ü–µ—Ä–∏–æ–¥ –Ω–µ —É–∫–∞–∑–∞–Ω');
    }
    
    // –ó–∞–ø–æ–ª–Ω—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ —Ç–∏–ø–∞–º
    const typeStats = {};
    operations.forEach(op => {
        const type = op.paymentTypeName || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';
        if (!typeStats[type]) {
            typeStats[type] = { count: 0, sum: 0 };
        }
        typeStats[type].count++;
        typeStats[type].sum += parseFloat(op.actualSum || 0);
    });
    
    let typeStatsHtml = '';
    Object.entries(typeStats).forEach(([type, stats]) => {
        typeStatsHtml += `
            <div class="d-flex justify-content-between mb-2">
                <strong>${type}:</strong>
                <span><span class="badge bg-secondary">${stats.count}</span> <strong class="text-success">${stats.sum.toFixed(2)} ‚ÇΩ</strong></span>
            </div>
        `;
    });
    $('#typeStatistics').html(typeStatsHtml);
    
    // –ó–∞–ø–æ–ª–Ω—è–µ–º —Ç–∞–±–ª–∏—Ü—É –æ–ø–µ—Ä–∞—Ü–∏–π (–∞–Ω–∞–ª–æ–≥–∏—á–Ω–æ createOperationsTable –Ω–æ –¥–ª—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞)
    let tableRowsHtml = '';
    operations.forEach((operation, index) => {
        let formattedDate = '';
        try {
            const dateValue = operation.date || operation.creationDate || '';
            if (dateValue) {
                const date = new Date(dateValue);
                formattedDate = date.toLocaleString('ru-RU');
            }
        } catch (e) {
            formattedDate = operation.date || operation.creationDate || '';
        }
        
        const operationType = operation.operationType || 'unknown';
        let operationTypeText = '';
        let operationTypeClass = '';
        
        switch (operationType) {
            case 'cashless':
                operationTypeText = '–ë–µ–∑–Ω–∞–ª–∏—á–Ω—ã–π';
                operationTypeClass = 'badge bg-primary';
                break;
            case 'payin':
                operationTypeText = '–í–Ω–µ—Å–µ–Ω–∏–µ';
                operationTypeClass = 'badge bg-success';
                break;
            case 'payout':
                operationTypeText = '–í—ã–¥–∞—á–∞';
                operationTypeClass = 'badge bg-warning text-dark';
                break;
            default:
                operationTypeText = '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';
                operationTypeClass = 'badge bg-secondary';
        }
        
        const amount = parseFloat(operation.actualSum || 0);
        const formattedAmount = amount.toFixed(2) + ' ‚ÇΩ';
        
        const status = operation.status || 'unknown';
        let statusText = '';
        let statusClass = '';
        
        switch (status) {
            case 'SUCCESS':
            case 'COMPLETED':
                statusText = '–£—Å–ø–µ—à–Ω–æ';
                statusClass = 'badge bg-success';
                break;
            case 'FAILED':
            case 'ERROR':
                statusText = '–û—à–∏–±–∫–∞';
                statusClass = 'badge bg-danger';
                break;
            case 'PENDING':
                statusText = '–í –æ–±—Ä–∞–±–æ—Ç–∫–µ';
                statusClass = 'badge bg-warning text-dark';
                break;
            default:
                statusText = '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';
                statusClass = 'badge bg-secondary';
        }
        
        tableRowsHtml += `
            <tr>
                <td>${index + 1}</td>
                <td><small>${formattedDate}</small></td>
                <td><span class="${operationTypeClass}">${operationTypeText}</span></td>
                <td>${operation.paymentTypeName || '–ù–µ —É–∫–∞–∑–∞–Ω'}</td>
                <td class="text-end"><strong>${formattedAmount}</strong></td>
                <td><span class="${statusClass}">${statusText}</span></td>
                <td><small class="text-muted">${operation.comment || '-'}</small></td>
            </tr>
        `;
    });
    
    $('#operationsDetailTableBody').html(tableRowsHtml);
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
    $('#operationsModal').modal('show');
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞ –≤ Excel
$(document).on('click', '#exportOperationsBtn', function() {
    if (!cashShiftData) {
        showError('–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞');
        return;
    }
    
    const operations = Array.isArray(cashShiftData) ? cashShiftData : cashShiftData.operations;
    
    if (!operations || operations.length === 0) {
        showError('–ù–µ—Ç –æ–ø–µ—Ä–∞—Ü–∏–π –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞');
        return;
    }
    
    // –°–æ–∑–¥–∞–µ–º CSV –¥–∞–Ω–Ω—ã–µ
    let csvContent = '‚Ññ,–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è,–¢–∏–ø –æ–ø–µ—Ä–∞—Ü–∏–∏,–°–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã,–°—É–º–º–∞,–°—Ç–∞—Ç—É—Å,–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π\n';
    
    operations.forEach((operation, index) => {
        let formattedDate = '';
        try {
            const dateValue = operation.date || operation.creationDate || '';
            if (dateValue) {
                const date = new Date(dateValue);
                formattedDate = date.toLocaleString('ru-RU');
            }
        } catch (e) {
            formattedDate = operation.date || operation.creationDate || '';
        }
        
        const operationType = operation.operationType || 'unknown';
        let operationTypeText = '';
        switch (operationType) {
            case 'cashless': operationTypeText = '–ë–µ–∑–Ω–∞–ª–∏—á–Ω—ã–π'; break;
            case 'payin': operationTypeText = '–í–Ω–µ—Å–µ–Ω–∏–µ'; break;
            case 'payout': operationTypeText = '–í—ã–¥–∞—á–∞'; break;
            default: operationTypeText = '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';
        }
        
        const amount = parseFloat(operation.actualSum || 0);
        const status = operation.status || 'unknown';
        let statusText = '';
        switch (status) {
            case 'SUCCESS':
            case 'COMPLETED': statusText = '–£—Å–ø–µ—à–Ω–æ'; break;
            case 'FAILED':
            case 'ERROR': statusText = '–û—à–∏–±–∫–∞'; break;
            case 'PENDING': statusText = '–í –æ–±—Ä–∞–±–æ—Ç–∫–µ'; break;
            default: statusText = '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';
        }
        
        csvContent += `${index + 1},"${formattedDate}","${operationTypeText}","${operation.paymentTypeName || '–ù–µ —É–∫–∞–∑–∞–Ω'}","${amount.toFixed(2)} ‚ÇΩ","${statusText}","${operation.comment || ''}"\n`;
    });
    
    // –°–æ–∑–¥–∞–µ–º –∏ —Å–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª
    const blob = new Blob([csvContent], { type: 'text/csv;charset=utf-8;' });
    const link = document.createElement('a');
    const url = URL.createObjectURL(blob);
    link.setAttribute('href', url);
    link.setAttribute('download', `operations_${new Date().toISOString().split('T')[0]}.csv`);
    link.style.visibility = 'hidden';
    document.body.appendChild(link);
    link.click();
    document.body.removeChild(link);
    
    showSuccess('–≠–∫—Å–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à–µ–Ω');
});
